// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20230109083002_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bouquet", b =>
                {
                    b.Property<int>("BouquetCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BouquetCode"), 1L, 1);

                    b.Property<string>("AccompagingMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BouquetType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("custFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BouquetCode");

                    b.HasIndex("custFK");

                    b.ToTable("Bouquet");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Customer", b =>
                {
                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("CIN");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Flower", b =>
                {
                    b.Property<int>("FlowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowerId"), 1L, 1);

                    b.Property<int>("BouqFK")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("FlowerId");

                    b.HasIndex("BouqFK");

                    b.ToTable("Flower", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ArtificialFlower", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Flower");

                    b.Property<DateTime>("ManuFactureDate")
                        .HasColumnType("date");

                    b.Property<string>("material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ArtificialFlower", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.NaturalFlower", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Flower");

                    b.Property<string>("origine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("savage")
                        .HasColumnType("bit");

                    b.Property<int>("season")
                        .HasColumnType("int");

                    b.ToTable("NaturalFlower", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bouquet", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Customer", "Customer")
                        .WithMany("bouquets")
                        .HasForeignKey("custFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Flower", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Bouquet", "Bouquet")
                        .WithMany("flowers")
                        .HasForeignKey("BouqFK")
                        .IsRequired();

                    b.Navigation("Bouquet");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.ArtificialFlower", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Flower", null)
                        .WithOne()
                        .HasForeignKey("Examen.ApplicationCore.Domain.ArtificialFlower", "FlowerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.NaturalFlower", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Flower", null)
                        .WithOne()
                        .HasForeignKey("Examen.ApplicationCore.Domain.NaturalFlower", "FlowerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bouquet", b =>
                {
                    b.Navigation("flowers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Customer", b =>
                {
                    b.Navigation("bouquets");
                });
#pragma warning restore 612, 618
        }
    }
}
